import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from notion import add_entry_to_notion

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

# –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞
FIELD_ALIASES = {
    "Name": "Name",
    "Rating": "Rating",
    "Brand": "Brand",
    "Country": "Country",
    "Region": "Region",
    "Producer": "Producer",
    "Altitude": "Altitude",
    "Process": "Process",
    "Roast Level": "Roast Level",
    "Varietal": "Varietal",
    "Flavor Notes": "Flavor Notes",
    "Roasted": "Roasted",
}
MULTI_FIELDS = {"Region", "Varietal", "Flavor Notes"}

# –®–∞–±–ª–æ–Ω –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
TEMPLATE_MESSAGE = """\
Name: 
Rating: 
Brand: 
Country: 
Region: 
Producer: 
Altitude: 
Process: 
Roast Level: 
Varietal: 
Flavor Notes: 
Roasted: 
"""

def setup_bot():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))
    return app

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üìã –í—Å—Ç–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ü–æ–ª–µ: –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–¥–Ω–æ –ø–æ–ª–µ)\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "Name: Ethiopia Yirgacheffe\nRating: 87\n...\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω üëá",
        reply_markup=reply_markup
    )

async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # –ö–Ω–æ–ø–∫–∞ "–í—Å—Ç–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω"
    if text == "üìã –í—Å—Ç–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω":
        await update.message.reply_text(
            TEMPLATE_MESSAGE,
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        return

    lines = text.splitlines()
    data = {}

    try:
        for line in lines:
            if ":" not in line:
                continue
            key, value = line.split(":", 1)
            key = key.strip()
            value = value.strip()
            field = FIELD_ALIASES.get(key)
            if not field or not value:
                continue

            if field in MULTI_FIELDS:
                data[field] = [v.strip() for v in value.split(",") if v.strip()]
            elif field == "Rating":
                try:
                    data[field] = float(value)
                except ValueError:
                    await update.message.reply_text("‚ö†Ô∏è Rating –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                    return
            else:
                data[field] = value

        if not data:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ –ø–æ–ª–µ.")
            return

        add_entry_to_notion(data)
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Notion!")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
